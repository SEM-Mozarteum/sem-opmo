;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2021, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; WEIGHTED RANDOM

;;; ---------------------------------------------------------

;; weights: 10% = 1, 30%  = 3, 60% = 6
;; 
(setf weight-lst
      '(1 3 3 3 6 6 6 6 6 6))

(rnd-sample 20 weight-lst)
;; e.g. (1 6 6 6 6 6 6 3 3 6 1 6 6 3 6 6 3 6 6 3)
;; see the  different results

;;; ---------------------------------------------------------

;;; WEIGHT-PICK / GEN-WEIGHT

#|
The function WEIGHT-PICK returns an element selected at 
random,  based on the weight value. The elements with 
higher weight values are more likely to be selected.
|#

(weight-pick '((a 4) (b 3) (c 7)) :seed 123)
;; => b

;;; ---------------------------------------------------------

;;; GEN-WEIGHT

#|
The function GEN-WEIGHT  enables you to create rest lengths 
in a list of note lengths. The :weight keyword allows you 
to control the weighting between note and rest values 
in relation to a sequence lengths.
|#

;; 4 times more mp than ff
(gen-weight 10 '((ff 1) (mp 4)) :seed 54)
;; => (mp mp ff mp ff mp ff mp mp mp)

;; See the distribution with 100 elements
(pitch-list-plot
 (gen-weight 100 '((c4 5) (d4 1) (e4 3) (f4 2) (g4 3)) 
             :seed 45)
 :style :axis :point-radius 2 :join-points nil)

;; With OMN structures
(gen-weight 10 '(((5e = = = =) 4) ((h) 2)
                 ((e = s = = =) 1) ((q - q - e =) 2)))


;; chords with weighted number of pitches
(setf weights (gen-weight 20 
                          '((1 5) (2 4) (3 3) (4 2) (5 1)) 
                          :seed 1234))

(loop for i in weights
      with seed = (init-seed 34)  
      append (chordize (midi-to-pitch 
                        (rnd-number i 60 80)))
      finally (init-seed nil))


(loop repeat 20
      for w = (gen-weight 1 
                          '((1 5) (2 4) (3 3) (4 2) (5 1))) 
      collect (chordize
               (midi-to-pitch
                (rnd-number (first w) 60 80))))
           

;;; ---------------------------------------------------------

;;; LENGTH-WEIGHT

#|
The function LENGTH-WEIGHT enables you to create rest 
lengths  in a list of note lengths. The :weight keyword 
allows you to control the weighting between note and rest 
values in relation to a sequence lengths.
|#

(setf len1 '(1/4 1/16 1/8 1/16 1/2 1/8 1/8 1/8 1/8))

(length-weight len1) ; 50/50 %

(length-weight len1 :weight '(3 1) :seed 54)
;;  (-1/4 1/16 1/8 -1/16 1/2 1/8 1/8 1/8 1/8)

(append
(length-weight '((q c4 d4 e4 f4 g4 a4 b4)
                 (q c4 d4 e4 f4 g4 a4 b4))
               :weight '((3 1) (5 2))
               :seed 52)
 (list '(q c4 d4 e4 f4 g4 a4 b4)))

;; ((-q - e4 f4 - a4 b4) (-q - e4 f4 - - b4)

;;; ---------------------------------------------------------

;;; Weighted random values from an envelope (undocumented)

;; number of events
(setf event-number 32)

;;; ENVELOPE-EXP

(defparameter gliss-prob-env
  (xy-plot ; needs lists of x/y values
   (gen-divide 2 ; combine x and y value in a list
               (envelope-exp 
                '(0 1 1 2 2 3 3 5 4 10 5 20 6 30 7 50 8 80)
                1.0 event-number)) ; linear interpolation
   :join-points t
   :point-radius 2)
  "x/y value pairs from an envelope of x/y-values."
  )

(defparameter gliss-prob
  (list-plot
   (mapcar #'round 
; rounding y-values for gen-weight (needs integers)
           (second ; all y-values
            (matrix-transpose 
             ; all x and y values in seperate lists
             gliss-prob-env)))
   :join-points t :point-radius 2 :style :axis)
  "Extracting and rounding probabilities (y-values) from env.")
     

(defparameter weight-pitch
  (flatten
   (loop for i in gliss-prob
     initially (rnd-seed 123)   
     collect
     (gen-weight 1 (list 
                    (list 'cs4 i) 
                    (list 'c4 40))
                 :seed  (seed)))))

#!
(ps 'gm
    :multi (make-omn
            :length (gen-repeat
                     (length weight-pitch)
                     's)
            :pitch weight-pitch)
    :time-signature '(4 4))
!#

;; the same with gliss
(defparameter weight-gliss
  (flatten
   (loop for i in gliss-prob
     initially (rnd-seed 123)   
     collect
     (gen-weight 1 (list 
                    (list 'gliss i) 
                    (list '- 30))
                 :seed (seed)))))

#!
(ps 'gm
    :multi (make-omn
            :length (gen-repeat
                     (length weight-gliss)
                     'h)
            :pitch '((b4))
            :articulation weight-gliss)
    :time-signature '(2 4))
!#


