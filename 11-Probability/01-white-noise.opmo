;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2017, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; PROBABILITY

;;; White Noise

#|
The function GEN-WHITE-NOISE generate N samples of white noise 
specified by the keyword :type.
Types are: :normal :binary :cauchy :chi-square-2 :exponential 
:extreme :gaussian :logistic :lognormal :triangular 
:low-pass :high-pass.
|#

;; To demonstrate the different :type of the GEN-WHITE-NOISE 
;; function we use LIST-PLOT with a :seed number.

#|
List-plot generates a graph from the data provided in sequences. 
Sequences may be either a single sequence of real numbers, or a series 
of such sequences.  Each number in a sequence represents a y-coordinate. 
Numbers are positioned along the x axis according to their position in 
the sequence.
By default points are plotted starting at x = 1. If :zero-based is T, 
points will start being plotted at the x coordinate of 0. 
The points are drawn as circles. :point-radius lets you control the 
size of the circles. If 0, the points will not be drawn. If 
:join-points is T, the points (whether visible or not) will be 
connected with line segments. The :style keyword argument may be 
either :axis or :fill.
|#

;; normal
(list-plot (gen-white-noise 100 )
 :join-points t :point-radius 1.5)

#|
INIT-SEED can be used at the start of algorithmic compositions 
employing high degrees of randomness in order to create consisted 
results, without having to worry about supplying seed N values to 
all the other functions which may also use random generation.
|#

(init-seed 32)
(rnd-pick '(a b c)) ; => will always pick b, when evaluated once.

(gen-eval 12 '(rnd-pick '(a b c)))
;; => (b b c b c b a a b c a c)

;; binary
(list-plot (gen-white-noise 100 :type :binary :seed 23)
 :join-points t :point-radius 1.5)

;; exponential
(list-plot (gen-white-noise 100 :type :exponential :seed 23)
 :join-points t :point-radius 1.5)

;; gaussian
(list-plot (gen-white-noise 100 :type :gaussian :seed 23)
 :join-points t :point-radius 1.5)

;; There is another function only for gaussian noise:
(list-plot (gen-gaussian-noise 500)
 :join-points nil :point-radius 1)

;; high-pass
(list-plot (gen-white-noise 100 :type :high-pass :seed 23)
 :join-points t :point-radius 1.5)

;; low-pass
(list-plot (gen-white-noise 100 :type :low-pass :seed 23)
 :join-points t :point-radius 1.5)

;; Make pitches from white noise. vector-to-pitch is converting the 
;; output of gen-white-noise to a given pitch range.
(setf pitches (vector-to-pitch '(c3 c5) (gen-white-noise 12 :seed 89)))
=> (d3 c5 e4 e3 gs3 e4 c5 c3 a4 g4 bb3 g4)

;; Here are the mechanics of this mapping that demonstrate how the 
;; conversion from vectors to pitches is made:
(setf mel-data1
      (vector-round -12 12 (gen-white-noise 12 :seed 89)))
=> #(-4 7 3 -3 -1 3 7 -5 6 4)

(integer-to-pitch mel-data1)
=> (d3 c5 e4 e3 gs3 e4 c5 c3 a4 g4 bb3 g4)

#|
The function VECTOR-TO-LIST will convert a vector array to a series 
of lists. This is a most important and necessary conversion function 
as many of the major generative functions output in vectors, notably 
GEN-WHITE-NOISE and GEN-GAUSSIAN-NOISE.
|#
 
(setf mel-data2 (vector-round 0 12 (gen-white-noise 20)))

(integer-to-pitch (vector-to-list mel-data2))

#|
Sometimes preparing and processing material in a vector-state can be 
more effective than in an integer state. Smoothing operations are one 
such instance. Notice the improved definition of a white-noise vector 
stream through using VECTOR-SMOOTH.
|#

(setf vector (gen-white-noise 200 :seed 345))

;; compare the output with the smoothen ones:
(list-plot vector)

(list-plot (vector-smooth 0.15 vector))

(list-plot (vector-smooth 0.05 vector))

