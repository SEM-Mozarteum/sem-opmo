;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2021, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; VELOCITY

#|

Velocity is a term from the MIDI system. It indicates how hard
the key was struck when the note was played, For electronic 
musical instruments, velocity can be equated with the term 
touch response. The velocity is determined from the speed 
(velocity) of the key which usually corresponds to the note's 
loudness (the MIDI velocity range is from 0â€“127, with 127 
being the loudest). 
|#

;;; ---------------------------------------------------------

;;; GET-VELOCITY

;; The are 12 dynamic symbols in Opusmodus by default
(get-velocity '(ppppp pppp ppp pp p mp mf f ff fff ffff fffff))
;; velocity refers to the speed a key is pressed down => dynamic
;; These dynamics are distributed between 0 and 1
;; => (0.02 0.11 0.19 0.27 0.35 0.43 0.5 0.58 0.66 0.74 0.84 1.0)

;; Reversed action: 
;; Get the dynamic symbols from velocity values between 0.02 and 1.0
;; with the type keyword symbol
(get-velocity 
 '(0.02 0.11 0.19 0.27 0.35 0.43 0.5 0.58 0.66 0.74 0.84 1.0) :type :symbol)
;; => (ppppp pppp ppp pp p mp mf f ff fff ffff fffff)

;; 10 random velocity values between 0.01 and 1.0
(get-velocity (rnd-number 10 0.01 1 :seed 123) :type :symbol) 
;; The values are rounded to fit the appropriate dynamic symbol
;; => (p fffff mp pppp fffff mf pp mf p fffff)

;;; ---------------------------------------------------------

;;; GEN-CRESC / GEN-DIM /  GEN-CRESC-DIM

;; Make a crescendo from pp to f in 7 steps
(gen-cresc 7 'pp 'f) ; => (pp p p mp mf mf f)

;; Make a diminuendo between fff and p in 20 steps
(gen-dim 20 'fff 'p) ; => fff fff ff ff ff ff f f f f mf mf mf mf mp mp mp p p p)

;; The function GEN-CRESC-DIM will generate a crescendo from a lower velocity 
;; value to a peak value at half the specified length. Having reached this, 
;; it will then generate a diminuendo for the rest of the lengths. 
(gen-cresc-dim 15 0.3 0.7) ; => (0.3 0.4 0.5 0.6 0.7 0.7 0.6 0.5 0.4 0.3)

;; The other way round:
(get-velocity (gen-dim-cresc 10 0.5 0.1) :type :symbol)
;; => (mf mp p pp ppp pppp ppp pp p mp)

;; Reverse the dynamic list
(velocity-retrograde '(mf p pp mp = = = p fff)) 
;; => (fff p mp mp mp mp pp p mf)
;; the "=" sign means "repeat" in OMN

;;; ---------------------------------------------------------

;;; GEN-DYNAMIC

;; Gen-dynamic generates a dynamic (crescendo and diminuendo) 
;; over a given number of steps (count).

(gen-dynamic '(3 1) '(p f))
;; => (p< < < f)

(gen-dynamic '(3 5 4 4 3) '(pp f ff mf f))
;; => (pp< < < f< < < < < ff> > > > mf< < < < f f f)

;; Examples with optional end velocity value (keyword :end)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) :end 'p)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f> > > > p)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) :end '>)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f> > > > >)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) :end '<)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f< < < < <)

;; nested dynamic list (measures)
(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)))
;; => ((pp< < < f> > > > >) (p< < < < mf< < < <) (f> > > > > p p p))

(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)) :end 'f)
;; => ((pp< < < f> > > > >) (p< < < < mf< < < <) (f> > > > > p< < f))

(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)) :end '<)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f< < < < <)

;; Setting the :extend to t will removes intermediate textual 
;; dynamic indicators and replace them with extended hairpins
;; Here the intermediate f and mf are exchanged with a hairpin:

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf ppp) :end 'p :extend t)
;; =>(pp< < < < < < < < ff> > > > > > > > ppp< < < < p)

;;; ---------------------------------------------------------

;;; OMN EXAMPLE

;; Make random numbers
(setf vel (rnd-number 16 0.1 0.8 :seed 3))

;; Convert them to dynamics
(setf vel1 (get-velocity vel :type :symbol))

;; Make pitches according to velocities
;; vector functions do parameter patchings
(setf pitches1 (vector-to-pitch '(g4 g5) vel))

;; quartertones pitches  with the keyword :quantize
(setf pitches1 (vector-to-pitch '(g3 g4) vel :quantize 1/4))

;; take the velocities and convert them to lengths:
;; louder notes become longer
(setf durs1 (vector-to-length '1/16 1 8 vel))

;; or make a decision between two choices
(setf durs1 (vector-map '(1/16 1/2) vel))

(make-omn
 :pitch pitches1
 :length durs1
 :velocity vel1)