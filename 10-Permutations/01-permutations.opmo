;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2017, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; PERMUTATIONS

;; The CARTESIAN function will return all the combinatory 
;; possibilities drawn from two or more sets.

(cartesian '((a b c d) (1 2 3 4)))
#|
((a 1) (a 2) (a 3) (a 4)
 (b 1) (b 2) (b 3) (b 4)
 (c 1) (c 2) (c 3) (c 4)
 (d 1) (d 2) (d 3) (d 4))
|#

;; Generate OMN fragments with CARTESIAN sets:
(setf cart (cartesian '((e q) (c4 d4 ds5) (mp mf f))))

;; PERMUTE-N will return a list of all the permutations 
;; of the integers 1 - N.

(permute-n 3) ; ((1 2 3) (1 3 2) (3 1 2) (2 1 3) (2 3 1) (3 2 1))

;; The function PERMUTE will generate multiple lists of all 
;; the permutations from a list of items.

(permute '(1 2 3 4))

;; Sublists are handled as single items

(permute '((c4 d4) (e4 f4) (g4 a4)))

;; The function POWER-SET will generate not only all permutations 
;; of a set (as in the permute function), but also all possible 
;; sub-permutations.

(power-set '(1 2 3 4))

;; For example a solo for conga drums playing through a 
;; POWER-SET permutation.

;; A list of variables is created
(setf 
 c-1 '(c4 cs4)
 c-2 '(cs4 c4 d4)
 c-3 '(cs4 c4 cs4 d4)
 b-1 '(ds4 e4)
 b-2 '(ds4 e4 ds4)
 b-3 '(e4 ds4 e4)
 )

;; Here only the variables are permutated
(setf perc-pat (power-set '(c-1 c-2 c-3 b-1 b-2 b-3)))	

;; The permutated variables are evaluated with apply-eval
(setf perc-solo (apply-eval perc-pat))
(setf durs (span perc-solo '(1/16)))
(setf mat1 (make-omn :pitch perc-solo :length durs))
(setf time-sig (get-time-signature mat1))

(def-score perc
           (:key-signature 'chromatic
            :time-signature time-sig
            :tempo '(100)
            :layout (percussion-layout 'percussion)
            ; this layout creates a percussion clef for the
            ; instrument "percussion"
            )
  
(percussion
 :omn mat1
 :channel 10
   :sound 'gm))          

;; COMBINATION will return a list of all the combinations 
;; N elements in length from a list.

(combination 2 '(1 2 3))
;; ((1 2) (1 3) (2 3) (3 1) (3 2) (2 1))

(combination 3 '(1 2 3))
;; ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))

;; Generate all note combinations
(setf pitches (combination 3 '(c4 d4 f4 g4 a4)))

(make-omn
 :pitch pitches
:length (span pitches '(1/16)))

;; combination1 returns a list of all combinations 
;; of length N of the elements of list INCLUDING 
;; REPETITIONS OF ELEMENTS.  N must be greater than 0.

(combination2 3 '(1 0))
;; ((0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))

