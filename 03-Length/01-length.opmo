;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2021, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; LENGTH

#|
Lengths in OM are represented as ratios from 1 = 4/4 
as in conventional notation:

1/4 is a quarter note
1/2 is a half note

In traditional notation irrational divisions are described
from the quarter note:

1/3 is a triple eigths note
1/5 is a quintuplet sixtenth note

In OM the description of irrational divisions are 
consequently described as divisions of the whole note:

1/12 is a triple eigths note 
(12 triplets eigth notes fit in one 4/4 measure)
1/20 is a quintuplet sixtenth note
(20 quintuplets fit in one 4/4 measure)

There is a differentiation between length and duration in OM:
- Length is the actual note length
- Duration is the distance of events including lengths and 
rests
|#

;;; ---------------------------------------------------------

;; Since it is always needed to have the same amount of
;; pitches and length, with span the derivation of lengths 
;; from a given pitch list is possible.

(setf pitches (integer-to-pitch (rnd-row)))
(setf lengths (span pitches '(1/16)))

;; visualize pitches and durations
(length-pitch-list-plot lengths pitches :join-points t)

;; Putting together pitches and durations with make-omn

#|
OMN is an acronym for OPUSMODUS NOTATION. 
In make-omn the separate parameters of pitch, 
length, dynamics and articulations are combined
into individual events.
|#

(make-omn 
 :length lengths
 :pitch pitches)

;; another example
(setf pitches1 (integer-to-pitch (rnd-row :seed 134)))
(setf durations1 (span pitches1 '(1/8 1/16 1/16 1/4)))

(setf mat1 (make-omn 
            :length durations1
            :pitch pitches1))

#|
The length is the master (default) in make-omn
if you do :span :pitch the the pitch is the MASTER
|#

;; to plot the material use omn-list-plot

(omn-list-plot mat1)
(omn-list-plot mat1 :join-points t)

;;; ---------------------------------------------------------

;;; gen-length

;; Generating series of length values by multiplying a list 
;; of numerators with a list of denominators (base note 
;; lengths)

#|
3 -> numerator
-
4 -> denominator
|#

;; argument 1: numerator(s)
;; argument 2: denominator(s)
(gen-length '(8 4 2 1) 32) ; => (1/4 1/8 1/16 1/32)

;; all combinations of numerators and denominators
(gen-length '(1 4 8) '(4 8)) ; => ((1/4 1 2) (1/8 1/2 1))

;;; ---------------------------------------------------------

;;; gen-adjust

;; length-adjust fits as many notes as possible in a given
;; duration
(setf mat1 '(s c4e4 e g4 s eb4 e cs4 s e4 e b4 s fs4 e a4 s gs4 e f4 s bb4 e d4))
;; mat1 has a duration of 9/8

(list
(length-adjust 3/4 mat1)
(length-adjust 4/4 mat1)
(length-adjust 5/4 mat1))

;;; ---------------------------------------------------------

;;; gen-fit

#|
This function will add a length value to the last 
length value in the list or add a rest length value at the 
end of the list to fit the time signature measures.
|#

(setf lengths '(-e c4 q d4 e4 5h f4 5q g4))
(length-fit lengths)

;; The type :rest will add a rest length value at the end 
;; of the list to fit the time signature.
(length-fit lengths :type :rest)

