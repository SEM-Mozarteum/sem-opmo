;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg

;;; 2015 - 2021 (c) Achim Bornhoeft
;;; 2025 (c) Achim Bornhoeft
;;; ---------------------------------------------------------

;;; RESTS

#|
rests in OM are represented as negativ lengths
|#

;;; ---------------------------------------------------------

;; When gen-length gets negative values it returns rests
(gen-length '(1 -1 3 -1 2 -4) 16) 
;; => (1/16 -1/16 3/16 -1/16 1/8 -1/4)

;; 4 lengths and 3 rests
(setf lengths (gen-length '(1 -1 3 -3 1 2 -1) '(8)))
(setf pitches (midi-to-pitch '(60 65 78 71)))

(setf mat2 (make-omn
            :length lengths
            :pitch pitches))

;;; ------------------------------------------------------

;;; get-count / get-span

(setf rhythms '(1/16 1/8 1/16 1/12 -1/12 1/12))

;; "get-count" counts notes and rests:
(get-count rhythms) ; => 6

;; notes
(get-count rhythms :length :note) ; => 5

;; rests
(get-count rhythms :length :rest) ; => 1

;;  Calculate the overall duration with "get-span"

(get-span rhythms) ;  => 1/2

;; see 2 voices with cmd-2
(list rhythms (get-span (list rhythms)))

;;; ------------------------------------------------------

;;; length-invert

;; invert notes and lengths
(setf rhy '(1/4 -1/8 1/4 -1/8  1/4 -1/8 1/4 -1/8)) 

;; see result with cmd-2 (option-2 on Win)
(setf rhy-inv (length-invert rhy))

(list rhy (length-invert rhy))

;; difference between inverse and reverse rhythm
(list rhy
      rhy-inv
      (reverse rhy))

;;; ------------------------------------------------------

;;; length-legato

;; inverts rests to a length and adds the sum of the rests 
;; to the previous length
(setf rhy2 '(1/4 -1/16 1/16 -1/12 2/12 2/20 -3/20 -1/8))

;; see difference with cmd-2
(list rhy2 (length-legato rhy2))

;;; ------------------------------------------------------

;;; length-align

;; LENGTH-ALIGN is used to align a series of length lists 
;; with one another.
;; set more than one variable at once with setf

(setf v1 '(q h e. s q h e. s) ; 8/4
      v2 '(q h e. q h) ; 27/16
      va '(-e -s e s = = -e -s e s = = -e -s e s = =) ; 6/4
      vc '(h q e. s q. e s)) ; 25/16

;; Voices with different lengths, see with cmd-2
;; OM adds rests for display but not actually changing the lists
(setf strqt (list v1 v2 va vc))

;; Align all these lists by adding rests ('r) to the end ('e)
;; View with cmd-2 (opt-2 on Windows)
(length-align strqt :type 'r :position 'e)

;; Align all these lists by adding rests ('r) 
;; to the start ('s)
(length-align strqt :type 'r :position 's)

;; Align all these lists by adding rests ('r) symmetrically
;; at the start and at the end
(length-align strqt :type 'r :position 'o)

;; Align all these lists by adding rests ('r) randomly ('r)
(length-align strqt :type 'r :position '?)

;; Add new note lengths at the end
(length-align strqt :type 'n :position 'e)

;;; ------------------------------------------------------

;;; length-augmentation / length-diminution

(setf durlst '(1/8 1/4 1/8 1/8 -1/8 1/16 1/16 1/8 -1/8 1/8))

;; (See voices with cmd-2)
(setf dur-canon1 
      (list 
       (length-augmentation 1/2 durlst)
       durlst 
       (length-augmentation 2 durlst)))

;; length-diminuition works only with integers     
(setf dur-canon2
      (list  
       durlst
       (length-diminution 2 durlst)
       (length-diminution 4 durlst)))

;;; ------------------------------------------------------

;;; length-weight

;; A list of durations
(setf len1 '(1/4 1/16 1/8 1/16 1/2 1/8 1/8 1/8 1/8))

;; length-weight returns a weighted distribution of notes
;; and rests (change randomly the prefix of the rhythms
;; in the input list)
;; see distribution with cmd-2 (ctrl-2)
(gen-loop 5 (length-weight len1))

;; 5 voices three times more notes than rests
(gen-loop 5 (length-weight len1 :weight '(3 1))
          :seed 123)

;;; ------------------------------------------------------
