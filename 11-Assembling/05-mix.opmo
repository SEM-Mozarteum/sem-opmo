;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2021, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; MIXING

;;; ---------------------------------------------------------

;;; GEN-COLLECT

#|
The function GEN-COLLECT makes it possible for n items from a list  
to be collected incrementally and placed in a new list, and the 
remaining items collected and placed in another list.
|#

(setf mat '((c4 db4 ab4 f4 g4 bb4) (a4 eb4 b4 e4 d4 gb4)
            (db4 ab4 f4 g4 bb4 a4) (eb4 b4 e4 d4 gb4 c4)))

;; Mixing the three first pitches of each measure
(setf first-half (gen-collect 3 mat))
;; => ((c4 db4 ab4) (a4 eb4 b4) (db4 ab4 f4) (eb4 b4 e4))

;; Getting the rest
(setf second-half (gen-collect 3 mat :rest t))
;; => ((f4 g4 bb4) (e4 d4 gb4) (eb4 b4 e4) (d4 gb4 c4))

;; Taking different numbers of elements from consecutive lists
(gen-collect '(1 2 3 2) mat)
;; => ((c4) (a4 eb4) (db4 ab4 f4) (eb4 b4))

;;; ---------------------------------------------------------

;;; GEN-COMBINE

#|
GEN-COMBINE makes a simple matrix transformation, taking all first elements
of a list of lists, all second elements, etc.
This is often useful when distributing chords to voices.
|#

(setf mat1 '(c4db4 ab4f4 g4bb4 a4eb4 b4e4 d4gb4))
(setf mat2 '(db4ab4 f4g4 bb4a4 eb4b4 e4d4 gb4c4))

(gen-combine mat1 mat2)

;; With the :rest keyword the process is continued until the
;; longest list is finished.
(gen-combine '(a a a a) '(b b b) '(c c) :rest t)
;; => ((a b c) (a b c) (a b) (a))

;; The keyword :revolving, when followed by t (true) makes 
;; GEN-COMBINE continue when the shortest list is exhausted.
(gen-combine '(a a a a) '(b b b) '(c c) :revolving t)
;; => ((a b c) (a b c) (a b c) (a b c))

;;; ---------------------------------------------------------

;;; GEN-DIVIDE

;; GEN-DIVIDE can be used to divide a list of items into sublists 
;; of a given size. 	
(integer-to-pitch (gen-divide 2 '(0 1 2 3 4 5 6 7 8 9)))
;; => ((0 1) (2 3) (4 5) (6 7) (8 9))

;; The argument can be a list of divisions
(gen-divide '(1 2 3 4) '(0 1 2 3 4 5 6 7 8 9))
;; => ((0) (1 2) (3 4 5) (6 7 8 9))

;;; ---------------------------------------------------------

;;;  GEN-FRAGMENT

;; GEN-FRAGMENT returns a fragment of a sequence from an existing 
;; list or lists.
(gen-fragment 1 '(3) '(c4 d4 e4 f4 g4 a4))
;; => (c4 d4 e4)

;; Two consecutive fragments
(gen-fragment 2 '(3) '(c4 d4 e4 f4 g4 a4))
;; => (c4 d4 e4 f4 g4 a4)

;; Two consecutive fragments in lists (similar to gen-divide)
(gen-fragment 2 '(3) '(c4 d4 e4 f4 g4 a4) :lists t)
;; => ((c4 d4 e4) (f4 g4 a4))

;; Lists are interpreted as random ranges:
;; 2 fragments of length between 2 and 3 plus 4 fragments  
;; of length between 2 and 3.
(chordize-list (gen-fragment '(2 4) '(2 3) 
              '((c4 d4 e4 f4 g4 a4) (cs4 ds4 fs4 gs5 as4)) :lists t))

;; => ((f4 g4) (d4 e4) (cs4 ds4) (ds4 fs4 gs5) (cs4 ds4 fs4) (ds4 fs4))
;;      2       2       2         3             3             2

;; An example with pitches.
(gen-fragment '(3 2) '((2 3) (1 2))
              '((q c4 stacc cs4 d4 c4db4 ten d4)
                (q e4 stacc f4 e4 e4f4 ten fs4))
              :seed 5 :lists t)
;; ((q cs4 stacc d4) (q cs4 d4 c4db4 ten) (q c4 ten cs4) (q fs4) (q e4f4))
;;   2                3                    2              1       1

;;; ---------------------------------------------------------

;;; GEN-INTERLEAVE

;; GEN-INTERLEAVE will step through each item in the list, 
;; generating a sublist of a given length beginning with that item.
(gen-interleave 3 '(g4 a4 f4 g4 c4))
;; => (g4 a4 f4) (a4 f4 g4) (f4 g4 c4))

;; Alternating between 2 and 3 notes
(gen-interleave '(2 3) '(g4 a4 f4 g4 c4 d4))
;; => ((g4 a4) (a4 f4 g4) (f4 g4) (g4 c4 d4) (c4 d4))

	
       
   




