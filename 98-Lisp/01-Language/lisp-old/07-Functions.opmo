;;; Opusmodus Tutorial - Introduction to Common Lisp
;;; Studio for Electronic Music (SEM), University Mozarteum, Salzburg
;;; (c) 2015 - 2016, Achim Bornhoeft

;;; Functions
 
#|
A function is a concept that is encountered in almost every programming language

Functions are most often created using the defun (DEfine FUNction) macro. 
This macro takes a list of arguments and a sequence of Lisp forms, called a body of a function. 
A typical use of defun is like this:

(defun <function-name> (<var1> <var2>)
   body))
|#

 (defun plus (x1 x2)
    (print x1)
    (print x2)
    (+ x1 x2))

#|
Here, the list of arguments is (x1 x2) and the body is (print x1) (print x2) (+ x1 x2). 
When the function is called, each form in the body is evaluated sequentially (from first to last). 
What if something happened and we want to return from the function without reaching the lastform? 
The return-from macro allows us to do that. For example:
|#

  (defun print-arguments-and-return-sum (x1 x2)
    (print x1)
    (print x2)
    (unless (and (numberp x1) (numberp x2))
       (return-from print-arguments-and-return-sum "Error!"))
    (+ x1 x2))

#|
The second argument to return-from is optional, which means that it can be called 
with only one argument - in this case the function would return nil. 
|#

;; a function that converts midi to pitchclass (integers)
(defun midi2pc (midi)
    (mod midi 12))
;; (midi2pc 64) => 4

;; a function that converts a list of midi notes to pitchclass (integers)
(defun midis2pc (midis)
  (loop for i in midis collect (mod i 12)))
;; (midis2pc '(60 56 78 33 64 91)) => (0 8 6 9 4 7)
