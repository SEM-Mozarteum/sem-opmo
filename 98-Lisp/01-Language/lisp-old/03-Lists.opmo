;;; Opusmodus Tutorial - Introduction to Common Lisp
;;; Studio for Electronic Music (SEM), University Mozarteum, Salzburg
;;; (c) 2015 - 2016, Achim Bornhoeft

;;; LISTS ;;;

#|
List is the most important data type in Lisp. 
Lists can be used to represent practically anything: 
sets, melodies, rhythms, etc.
Lists consist of items enclosed in parentheses. 
These items are called the elements of the list. 
Here are some valid lists:
|#

'(60 62 70 56 68 64)

;; IMPORTANT: The list has to be quoted with "'" at the beginning not to be evaluated.
;; Otherwise the "60" is interpreted as an (unknown) function.

'((60 62 70) (56 68 64)) ; a list of lists


'((1 (1 1 1)) (2 (1.0 1))) ; nested lists

;; You can create a list with the function list:

  (list 'a 'b 'c) ;  ⇒ (A B C)

;; cons

#| 
Cons requires two arguments. The data type of the first is arbitrary. The second has to be a list. Cons adds the values of the first argument to the beginning of the list (second argument) and returns the new list.
|#


(cons 1 '(2 3)) ; => (1 2 3) 

(cons '(1) '(2 3)) ; => ((1) 2 3)

(cons '1 NIL) ; => (1)

;; append

#|
Append is used to concatenate lists. This function requires only lists as inputs. The number of lists is arbitrary. The result is one new list.
|#

(append '(1) '(2) '(3)) ; => (1 2 3) 
 
;; If one of the lists contains other lists, these lists are preserved.
(append '(1 (2)) '(3)) ; => (1 (2) 3)

;; Empty lists are ignored.
(append '(1) nil '(2 3)) ; => (1 2 3)


;; You can access the members of a list with the functions car (or first) and cdr (or rest):

  (setf lis '(a b c)) ; '(a b c) is set to a variable called lis
  (car lis)  ;  ⇒ a
  (first lis) ; ⇒ a

  (cdr lis)  ;  ⇒ (b c)
  (rest lis)  ; ⇒ (b c)

#|
Common Lisp also defines the functions second, third and fourth (on up to tenth). 
Note that second is not the same as cdr or rest.
cdr and rest both return the remaining list after the first element, 
while second returns the second item in the list:
|#

  (rest lis)  ; ⇒ (b c)
  (second lis) ; ⇒ b
  (third lis) ; ⇒ c
  (fourth lis); ⇒ nil

;;Lists are sequences, so functions that operate on sequences also operate on lists:

  (subseq lis 0 1)  ⇒ (a)
  (subseq lis 0 2)  ⇒ (a b)

;; The function nth also allows you to retrieve selected items from a list:
;; Note that the first item in a list is the 0th. 

  (nth 0 lis)  ⇒ a

;; retrieve length of a list

  (length '(1 2 3 4 5 6)) ; => 6

;; Simply the reversed list

  (reverse '(4 2 3 11 5 6 1)) ; => (1 6 5 11 3 2 4)

;; With sort a list is sorted with a specified attribute

  (sort '(60 64 56 45 66 87) #'<) ; => (45 56 60 64 66 87)

  (sort '(60 64 56 45 66 87) #'>) ; => (87 66 64 60 56 45)

;; The list is reduced according to a given funcion:

  (reduce  '+ '(1 2 3 4)) ; => 10
;; In this case it's the same as (+ 1 2 3 4)

  (reduce '/ '(1 2 3 4)) ; => 1/24











