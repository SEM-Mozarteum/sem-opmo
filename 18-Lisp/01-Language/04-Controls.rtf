{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li574\fi13\pardirnatural

\f0\fs48 \cf0 Introduction to Common Lisp\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\fs28 \cf0 \'a9
\f1  2016 , Studio for Electronic Music, University Mozarteum Salzburg\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li574\fi13\pardirnatural

\f0\fs36 \cf0 Controls\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li574\fi13\pardirnatural

\f1\fs28 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\b\fs36 \cf0 Attributes\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\b0\fs24 \cf0 LISTP is testing if the argument is a list\
\

\f2 (LISTP '(A B C))\
T\
\
(LISTP NIL) \
T \
\
(LISTP 12) \
NIL \

\f1 \
CONSP is testing if the argument is a non-empty list\
\

\f2 (CONSP 6) \
NIL \
\
(CONSP '(A B)) \
T \
\
(CONSP NIL)\
NIL\

\f1 \
NUMPBERP is testing if the argument is a number\
\

\f2 (NUMBERP 12)\
T\
\
(NUMBERP 'ZAHL) \
NIL 
\f1 \
\
EQUAL is testing if both arguments are the same\
\

\f2 (EQUAL '(1 2 3) '(1 2 3)) \
T \
\
(EQUAL '(1 2 3) '(4 5)) \
NIL \

\f1 \
ZEROP is testing if the argument is zero\
\

\f2 (ZEROP 0) \
T \
\
(ZEROP 12) \
NIL 
\f1 \
\
MEMBERP is testing if the argument is a member of the following list. \
If true the list from this point to the end is returned\
\

\f2 (MEMBER 'I '(A I O U)) \
(I O U) \
\
(MEMBER 'B '(A I O U)) \
NIL 
\f1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\b\fs36 \cf0 Arithmetic Comparions
\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\f2 \cf0 (> 7 6) \
T \
\
(< 2 3) \
T \
\
(> 2 6) \
NIL \
\
(< 45 3) \
NIL \
\
(= 10 10) \
T \
\
(= 29 10) \
NIL\

\f1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\b\fs36 \cf0 Logical Operators
\b0\fs24 \
\
\
NOT is testing if the argument is evaluation to NIL \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj

\f2 \cf0 (NOT T) \
NIL \
\
(NOT NIL) \
T \
\
(NUMBERP 3) \
T \
\
(NOT (NUMBERP 3)) \
NIL \

\f1 \
;; OR is testing from left to right and returns the first value that is not\
;; evaluating to nil.\
\

\f2 (OR 'A 'B) \
A \
\
(OR (NUMBERP 10) (CONSP 10) NIL) \
T \
\
(OR (NUMBERP '(A B C)) (CONSP '(A B C))) \
T \
\
(OR (NUMBERP 'A) (CONSP 'A)) \
NIL\

\f1 \
AND is testing if all the arguments are evaluating to TRUE\
;; It stops at the first argument evaluatin to NIL.\
Beispiele: \
\

\f2 (AND T T T) \
T \
\
(AND NIL NIL NIL) \
NIL \
\
(AND T NIL) \
NIL \
\
(AND (FIRST '(A B C)) (REST '(E F G))) \
(F G)
\f3\b\fs36 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f1 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13\qj
\cf0 Conditionals\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\b0\fs24 \cf0 LISP provides a standard set of logical functions, for example and, or, and not. \
The and and or connectives are short-circuiting: and will not evaluate any arguments \
to the right of the first one which evaluates to nil, while or will not evaluate any \
arguments to the right of the first one which evaluates to t (with t we mean here ``non-nil'').\
\
LISP also provides several special forms for conditional execution. The simplest of these is if. \
The first argument of if determines whether the second or third argument will be executed:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f2 \cf0 (if t 5 6)\
5\
\
(if nil 5 6)\
6\
\
(if 4 5 6)\
5\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f1 \cf0 \
If you need to put more than one statement in the then or else clause of an if statement, \
you can use the progn special form. Progn executes each statement in its body, then returns\
 the value of the final one.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f2 \cf0 (setq a 7)\
7\
\
(if (> a 5) \
  a \
  5)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f1 \cf0 \
An if statement which lacks either a then or an else clause can be written using the when or unless special form:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\li574\fi13

\f2 \cf0 (when t 3)\
3\
\
(when nil 3)\
NIL
\f1 \
\
A cond consists of the symbol cond followed by a number of cond clauses, each of which is a list. \
The first element of a cond clause is the condition, the remaining elements (if any) are the action. \
The cond form finds the first clause whose condition evaluates to true (ie, doesn't evaluate to nil), \
 it then executes the corresponding action and returns the resulting value. None of the remaining \
conditions are evaluated, nor are any actions except the one corresponding to the selected condition. \
For example:\
\

\f2 (setq a 3)\
3\
\
(cond\
 ((evenp a) a)        ;if a is even return a\
 ((> a 7) (/ a 2))    ;else if a is bigger than 7 return a/2\
 ((< a 5) (- a 1))    ;else if a is smaller than 5 return a-1\
 (t 17))              ;else return 17\
\
2\
}