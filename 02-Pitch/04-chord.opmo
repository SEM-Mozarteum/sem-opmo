;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg

;;; 2015 - 2021 (c) Achim Bornhoeft
;;; 2025 (c) Achim Bornhoeft
;;; ---------------------------------------------------------

;;; CHORD

#|
chords are written as directly consecutive notes:
'(c4 eb4 g4) => melody
'(c4eb4g4) => chord
|#

;;; ---------------------------------------------------------

;;; chordize / melodize / chordize-list / midi-to-pitch

(chordize '(c4 e4 g5 d3))
;; and vice versa
(melodize '(c4d4f4)) ; => (c4 d4 f4)

;; chordize-list allows you to chordize melodic lists.
(chordize-list '((c4 e4) (g4 c5)))

;; several chords converted from midi melodies
(chordize-list 
 (midi-to-pitch '((60 56) (67 62) (62 65 66) (63 60 61))))

;; Divide up a melody into intervals
(chordize-list (gen-divide 2 '(c4 f4 g4 a4 d4 f3)))

;; If there is a rest this rest is given as the last chord
(chordize-list (gen-divide 4 '(c4 f4 g4 a4 d4 f3)))

;; Group a melody in different chords
(chordize-list (gen-divide '(2 1 3) '(c4 f4 g4 a4 d4 f3)))

;; midi-to-pitch interpret sublists automatically as chords
(midi-to-pitch '((58 62) (59 65 75) (60 67) 61 62)) 
;; => (bb3d4 b3f4eb5 c4g4 cs4 d4) 

;;; ---------------------------------------------------------

;; extended example

;; construction of random chords
(setf chords
      (respell ; try to make correct interval notation
       (chordize ; make chords from it
        (midi-to-pitch ; convert to pitch
         (gen-loop 10 ; make 10 different chords
                   (rnd-number 
                    (rndn 1 2 5) ; notes in chord 
                    60 69 ; between c4 and ab4
                    :norep t) ; no repetitions in chord
                     :seed 123))))) ; fix random

;; show the number of pitches in chords
(get-chord-size (flatten chords)) ; => (5 4 4 3 4 3 4 3 3 4)

;;; ---------------------------------------------------------

;;; respell 

#|
The 'respell' function can be used to change the pitch name 
of chord clusters to avoid the identical note names that 
produce conflicts in notation display. The function will 
also respell ascending pitch sequences to sharps and flats 
when pitches descend.

NOTE:
This function works momentarily with chromatic pitches only.
|#

(respell '(c4cs4)) ; => (c4db4)
(respell '(c4 db4 d4 eb4 e4 f4 gb4 g4 ab4 a4 bb4 b4)) 
;; => (c4 cs4 d4 ds4 e4 f4 fs4 g4 gs4 a4 as4 b4)

;;; ---------------------------------------------------------

;;; chord-inversion

;; The function CHORD-INVERSION will generate all the 
;; inversions (rotations) of a chord up to and including N. 
;; For example, the first inversion of C major will give us:
(chord-inversion 1 'c4e4g4)

;; the 4th inversion and the root chord
(chord-inversion 4 'c4e4g4 :root t)

;; all inversions and the root chord
(chord-inversion 4 'c4e4g4 :series t :root t)

;; two chord inversions in parralel
(chord-inversion '(2 4) '(c4e4g4 g4b4d4) :series t)

;;; ---------------------------------------------------------

;;; dechord

#|
This function returns a single note from every chord found 
in a sequence. There are 3 pitch position options 'root 
(same as 'low) and 'top (same as'high) and '? (at random) 
to choose from.
|#

(setf mat '(c4d4e4f4g4a4))

;; default is root (low)
(dechord mat)

;; The highest note is chosen
(dechord mat :pitch 'high)

;; One pitch is chosen at random
(dechord mat :pitch '?)

(setf mat2 '((q c4 f4a4d5 e fs5) 
             (s cs4 d4 ds4fs4 q c4e4gs4)))

;; The highest notes from chords are chosen. 
;; Single pitches are left unchanged
(dechord mat2 :pitch 'high)

;;; ---------------------------------------------------------

;;; chord-pitch-unique

;; When working with large amounts of generated or 
;; processed data, there may be some situations in which 
;; repeated pitches occur in chords.

;; Remove duplicate chord pitches in a single list:
(chord-pitch-unique '(c4g4c4 d4d4 f4a4b3a4 g4e3e3g4))
;; => (c4g4 d4 f4a4b3 g4e3)

;;; ---------------------------------------------------------

;;; chord-interval-replace

(setf chord '(c4d4g4b4))

;; replaces the interval 11 in the chord with 10
(chord-interval-replace 11 10 chord)

;; replaces the interval 11 in the chord with 10,
;; and 7 with 6
(chord-interval-replace '(11 7) '(10 6) '(c4d4g4b4))

;;; ---------------------------------------------------------

;;; chord-dissolve

#|
This function creates a chord from a list of pitches and 
dissolves the chord by one pitch at the time. The process 
can be controlled by a variant option. 
|#

(setf diss-chord '(c4e4gs4b4d5f5a5))

;; arg1: number of chords
;; arg2: number of dissolve levels

;; When the count and the level values are equal to the 
;; chord size, the chord is dissolved completely
;; (length (melodize diss-chord)) ; => 7
(chord-dissolve 7 7 diss-chord)

;; If the number of chords is larger then the dissolve lebels
;; or pitch count in the list, a reverse process will start
(chord-dissolve 13 7 diss-chord)

;; This process is reflected until the number of
;; steps is reached
(chord-dissolve 13 4 diss-chord)

;; The chord is dissolved in descending direction
(chord-dissolve 7 7 diss-chord :variant 'd)

;; The same but in random order
(chord-dissolve 7 7 diss-chord :variant 'ro)

;;; ---------------------------------------------------------

;;; chord-interval-remove

;; the interval 11 is removed from a chord
(chord-interval-remove 11 '(c4d4g4b4))

(setf chord '(cs4e4fs4a4bb4c5eb5))

;; the intervals 2 and 11 are reomved from the chord.
(chord-interval-remove '(2 11) chord)
;; => (cs4e4a4)

;;; ---------------------------------------------------------

;; Detailed example:

;; intervals of a chromatic scale
(setf intervals (gen-integer 0 12))

;; make a cluster
(setf chord2 (chordize (integer-to-pitch intervals)))

;; 10 chords with between 2 and 8 randomly removed
;; intervals between 3 and 7 (minor third and fifth)
(gen-loop 10 (chord-interval-remove 
              (rnd-sample ; random pick from interval list
               (rndn 1 2 8) ; how many 
               (gen-integer 1 7) ; list of intervals
               :norep t) ; possibly no repeated values
              chord2)) ; chord

;;; ---------------------------------------------------------

;;; gen-chord

#|
The function GEN-CHORD generate chords with the unique
pitches from a list, which means until all notes of a 
chord are used.

The ambitus-chord arguments: 
(1) is the max ambitus possible, randomly depending 
on the intervals available in the list of pitches.
The size of the chord generated will lie between chord-low 
(2) and chord-high (3). The transposition of pitch values 
can also be set to lie between transpose-low (4) and 
transpose-high (5) parameters. 
|#

;; The maximum ambitus is 7, the chord contain between 
;; 2 and 3 pitches with no transposition:
(gen-chord 7 2 3 0 0 '(c4 db4 fs4 g4 c5 f5 gb5 b5)
           :seed 12)
;; The resulting chords have 3 + 3 + 2 pitches = 8 pitches 
;; in the input list.

;; This should produce 2 chords
(gen-chord 7 4 4 0 0 '(c4 db4 fs4 g4 c5 f5 gb5 b5)) 

;; Intervals but randomly transposed -1 down and 1 
;; semitone up
(gen-chord 11 2 2 -1 1 '(c4 db4 fs4 g4 c5 f5 gb5 b5))

;; The same calculation repeated 5 times.
;; NOTE: The :seed keyword is now conected to gen-loop.
(gen-loop 5 (gen-chord 7 2 3 0 0 
                       '(c4 db4 fs4 g4 c5 f5 gb5 b5))
          :seed 12)

;; The chords are in random order
;; NOTE: 2 individual seeds
(gen-loop 5 (rnd-order
             (gen-chord 7 1 3 0 0 
                        '(c4 db4 fs4 g4 c5 f5 gb5 b5))
             :seed 123)
          :seed 12)

;; When the ambitus is quite high the possibilities 
;; of chord increase. Transpositions between a 
;; major second up and down are possible.
(gen-loop 10 (gen-chord 11 3 4 -2 2 
                        '(c4 db4 fs4 g4 c5 f5 gb5 b5)))
