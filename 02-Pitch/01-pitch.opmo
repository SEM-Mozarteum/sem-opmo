;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) Achim Bornhoeft
;;; ---------------------------------------------------------

;;; PITCH (NOTES)

#|
There are 4 different description of pitches in OM:
- note names (pitches)
- integer
- midis
- frequencies
Several functions provide for the conversion between these
different types.
|#

;;; ---------------------------------------------------------

;; a list of pitches = a melody
'(bb3 a3 c4 b3)

;; Set the variable 'bach to a list of pitches.
;; When a list is set to a variable, 
;; this variable is returning the list when evaluated.
(setf bach '(bb3 a3 c4 b3))

;; When set, the variable can be used in other calculations.
;; Here the melody is sorted in ascending order
(sort-asc bach)

;;; ---------------------------------------------------------

;;; GEN-REPEAT

;; GEN-REPEAT returns any number of repeats of a 
;; list or atom (number, pitch, name, etc.) creating
;; a new list:
(gen-repeat 3 'c4) ; => (c4 c4 c4)

;; (The default duration can be changed in the Preferences
;; under Audition - Length)

;; In plain LISP this would be:
(loop repeat 3 collect 'c4)

;; The complete "bach" note-list is repeated 2 times:
(gen-repeat 2 bach) 
;; => (bb3 a3 c4 b3 bb3 a3 c4 b3) 

;;; --------------------------------------------------------

;;; midi-to-pitch / gen-integer / integer-to-pitch / 

;; Set the variable "integer-scale" to a list of 
;; chromatic midi pitches
(setf midi-scale '(60 61 62 63 64 65 66 67 68 69 70 71))

;; and convert to note names:
(setf pitch-scale (midi-to-pitch midi-scale))
;; => (c4 cs4 d4 eb4 e4 f4 fs4 g4 gs4 a4 bb4 b4)

;; 8 random pitches between 60 and 72
;; (repetitions are possible.)
(midi-to-pitch (rnd-number 8 60 72 :seed 123))
;; => (e4 b4 fs4 d4 b4 fs4 eb4 fs4)
;; the seed argument sets and fixes ONE random choice.

;; the same chromatic scale with the function gen-integer
(gen-integer 60 71)

;; integer converted to pitch notation 0 = c4
(integer-to-pitch '(0 1 2 3 4 5 6 7 8 9 10 11)) 
;; => (c4 cs4 d4 eb4 e4 f4 fs4 g4 gs4 a4 bb4 b4)

;; negative integers are below 'c4
(integer-to-pitch '(-5 -4 -3 -2 -1 0 1 2 3 4 5 6)) 
;; => (g3 gs3 a3 bb3 b3 c4 cs4 d4 eb4 e4 f4 fs4)

;;; ---------------------------------------------------------

;;; DODECAPHONIC FUNCTIONS

;;; rnd-row / pitch-invert / reverse

;; twelve-tone row as integers
(setf row (rnd-row :seed 34)) 
;; => (0 7 3 1 4 11 6 9 8 5 10 2)
;; as pitches with the keyword :type and set to :pitch
(setf row-as-pitch (rnd-row :seed 34 :type :pitch)) 
;; => (c4 g4 eb4 cs4 e4 b4 fs4 a4 gs4 f4 bb4 d4)

;; visualize the pitches
(pitch-list-plot row-as-pitch :join-points t)

;; reversed row
(reverse row-as-pitch)

;; inverted pitches
(setf inverse (pitch-invert row-as-pitch))

;; reversed invertion of pitches
(reverse inverse)

;;; ---------------------------------------------------------

;;; integer-transpose / pitch-transpose

;; Transposes a sequence of integers to a given value.
;; integer-transpose is evaluated first an then passed
;; to integer-to-pitch
(integer-to-pitch
(integer-transpose 2 '(0 2 4)))

;; Pitches are transposed to a given value
(pitch-transpose 2 '(c4 d4 e4))
;; => (d4 e4 gb4)

;; A pitch can also be used as a transposition level
;; Here the same transposition as above:
(pitch-transpose 'd4 '(c4 d4 e4))
;; => (d4 e4 gb4)

;;; ---------------------------------------------------------

;;; integer-transpose-rnd / pitch-transpose-n

;; A given number of randomly selected pitches in a list 
;; is transposed by a specified value or values.
;; 4 of the c4 are randomly transposed a fifth up or down
(pitch-transpose-rnd 4 7 '(c4 c4 c4 c4 c4 c4 c4) :seed 456)
;; => (c4 f3 c4 g4 c4 f3 f3)

;; pitch-transpose-n will apply a sequence of 
;; transpositions on each individual pitch in a list.
;; each first pitch is not transposed, each second by a 
;; major second
(pitch-transpose-n '(0 2) '(c4 c4 g4 g4))
;; => (c4 d4 g4 a4)

;; transposition with pitches
(pitch-transpose-n '(d5 e5) '(c4 c4 g4 g4))
;; => (d5 e5 a5 b5)

;; Here a list of 6 randomly chosen intervals are used
;; as a transposition sequence
;; Note the nested calls of the functions
(pitch-transpose-n 
 (flatten ; remove the sublists
  (rnd-sample '(4 6 5 7 8) '(-2 -1 0 1 11)))
 ; takes n random samples (first list) from the second list
 (gen-repeat 24 'c4)) ; 24 times c4
