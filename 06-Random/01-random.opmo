;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2021, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; RANDOM

;;; ---------------------------------------------------------

;;; RND1 

#|
RND1 returns a random floating point number between 0.0 and 
1.0. If the low and high is an integer then the function 
returns a random number between low and high values.
|#

;; 1 number between 0 and 1
(rnd1) 

;;; ---------------------------------------------------------

;;; RND-NUMBER

;; RND-NUMBER generates a series of numbers in a given range. 

;; 10 numbers between 0 and 1
(rnd-number 10 0 1.0) 
;; same with rnd1
(gen-repeat 10 (rnd1))

;;; ---------------------------------------------------------

;;; RND

#|
By default RND returns a list of random floating point 
numbers N between 0.0 and 1.0. If the low and high is 
an integer then the function returns a list of random 
numbers N between low and high values.
|#

;; 10 numbers between 0 and 1
(rnd 10) 

;; 10 pitches between midi 60 and 84
(setf pitches (midi-to-pitch 
               (rnd 20 :low 60 :high 84)))

(make-omn
 :pitch pitches
 :length '(1/8)
 :span :pitch)

;;; ---------------------------------------------------------

;;; RND-REPEAT

;; RND-REPEAT can be used to choose randomly a given 
;; number N of items from a sequence.

(setf lengths (rnd-repeat (length pitches) '(1/16 1/8 1/4)))

(setf mat1 (make-omn 
            :pitch pitches
            :length lengths))

;;; ---------------------------------------------------------

;;; RND-PICK

#|
The function RND-PICK will pick either a single item from a 
list, or a sublist from a list of lists.
|#

(rnd-pick '(0 1 2 3 4 5 6 7 8 9))

(rnd-pick '((c4 d4) (e4 f4)))

;;; ---------------------------------------------------------

;;; RND-SAMPLE

#|
RND-SAMPLE can be used to choose randomly a given number 
of items from a sequence. 
|#

(setf mat2
(make-omn 
 :pitch (rnd-sample (length pitches) pitches)
 :length lengths))

;; make 5 voices, see with cmd-2
(gen-loop 6 (make-omn 
             :pitch (rnd-sample (length pitches) pitches)
             :length (rnd-sample (length pitches) lengths)
             ))

;;; ---------------------------------------------------------

;;; RND-UNIQUE

#|
The function RND-UNIQUE can be used to choose randomly a given n (number) of unique items from a sequence.
|#

(rnd-unique 6 '(0 1 2 3 4 5 6 7 8 9))

;; If the number of samples is larger than the lists length
;; only the nonrepeated elements of the list are chosen.
(rnd-unique 8 '(0 1 1 2 3 4 5))

;; the list can be of any type of elements
(rnd-unique 6 '(c4 cs4 c4 c5 fs4 f4 fs4 g4 b4 f4 c5))

;; With the :extend keyword set to :loop the result is
;; extended to a given number with non sucsessive repetitions
;; of elements from the list
(rnd-unique 13 '(c4 cs4 d4 ds4 e4 f4 fs4) 
            :extend :loop)

;;; ---------------------------------------------------------

;;; RND-ORDER

#|
RND-ORDER can be used to shuffle the order of a list, 
or to shuffle the order of the contents of a series of lists.
|#

(setf mat3
      (make-omn 
       :pitch (rnd-order pitches)      
       :length (rnd-order lengths)
       ))

(def-score random-pitches
    (:key-signature 'chromatic
     :time-signature '(4 4)
     :tempo 80) 
  (inst1
   :omn mat1
   :sound 'gm :program 0)
  
  (inst2
   :omn mat2
   :sound 'gm :program 0)
  
  (inst3
   :omn mat3
   :sound 'gm :program 0)) 

(display-midi (compile-score 'random-pitches))
(display-musicxml 'random-pitches)

;;; ---------------------------------------------------------

;;; RND-SAMPE-SEQ

;; RND-SAMPLE-SEQ can be used to choose randomly a given 
;; number of succesive items from a sequence. 
(setf mat (gen-loop (length lengths)  
                 (rnd-sample-seq 4 (interval-to-pitch
                                    ; Messiaen Modus 2
                                    '(1 2 1 2 1 2 1 2)))))

;; 2 of 3 pitches in the each sublist of pitches are 
;; transposed by an octave
(setf pitches (sort-asc (pitch-transpose-rnd 2 12 mat)))

(setf chords (matrix-transpose 
              (loop for i in pitches
                     collect (chordize (gen-divide 2 i)))))

(setf lh (make-omn
            :length lengths
            :pitch (first chords)))

(setf rh (make-omn
            :length lengths
            :pitch (second chords)))

(def-score random-transpositions
           (:key-signature '(c maj)
                           :time-signature '(4 4)
                           :tempo 80) 
  (inst1
   :omn rh
   :sound 'gm :program 0)
  
 (inst2
   :omn lh
   :sound 'gm :program 0))

(display-midi (compile-score 'random-transpositions))
(display-musicxml 'random-transpositions)

;;; ---------------------------------------------------------

;;; RND-SUM

;; A possibility to generate random durations which add
;; up to a given overall duration.

(setf lengths (gen-length (rnd-sum 64 '(1 2 3)) 16))

;; the sum of lengths is always the same
;; 64 * 1/16 = 4 * 4/4 = 4  
(sum lengths)

;;; ---------------------------------------------------------

;;; RND-SUM-TO-SIZE

;; This function returns a list of numbers which add up to 
;; N (total) into a given size (list length). 


(rnd-sum-to-size 45 8 '(2 3 5 7 11 13 17 19))

(rnd-sum-to-size 25 7 '(6 11 13 1 3))
;; => (1 6 3 3 6 3 3)

(rnd-sum-to-size 25 3 '(6 11 13 1 3))
;; => (1 11 13)

;; If total was not reached in a given size in a trial, 
;; altered numbers are append to the numbers set.

(rnd-sum-to-size 8 7 '(9 8 6))
;; => (1 1 1 1 2 1 1)

(rnd-sum-to-size 17 7 '(1 2))
;; => (3 3 3 2 2 1 3)