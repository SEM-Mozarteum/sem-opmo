;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; (c) 2015 - 2017, Achim Bornhoeft
;;; ---------------------------------------------------------

;;; DYNAMICS

;; The are 12 dynamic symbols in Opusmodus by default
(get-velocity '(ppppp pppp ppp pp p mp mf f ff fff ffff fffff))
;; These dynamics are distibuted between 0 and 1
;; => (0.02 0.11 0.19 0.27 0.35 0.43 0.5 0.58 0.66 0.74 0.84 1.0)

;; Get the dynamic symbols from velocity values between 0.02 and 1.0
;; with the type keyword symbol
(get-velocity 
 '(0.02 0.11 0.19 0.27 0.35 0.43 0.5 0.58 0.66 0.74 0.84 1.0) :type :symbol)
;; => (ppppp pppp ppp pp p mp mf f ff fff ffff fffff)

;; 10 random velocity values between 0.01 and 1.0
(get-velocity (rnd 10 :low 0.01 :high 1.0) :type :symbol) 
;; The values are rounded to fit the appropriate dynamic symbol
;; => (pp pp f ffff ppppp ffff ffff mf p fffff)

;; Make a crescendo from pp to f in 7 steps
(gen-cresc 7 'pp 'f) ; => (pp p p mp mf mf f)

;; Make a diminuendo between fff and p in 20 steps
(gen-dim 20 'fff 'p) ; => fff fff ff ff ff ff f f f f mf mf mf mf mp mp mp p p p)

;; The function GEN-CRESC-DIM will generate a crescendo from a lower velocity 
;; value to a peak value at half the specified length. Having reached this, 
;; it will then generate a diminuendo for the rest of the lengths. 
(gen-cresc-dim 13 0.1 0.7) ; => (0.1 0.18 0.26 0.35 0.43 0.5 0.43 0.35 0.26 0.18)

;; The other way round:
(get-velocity (gen-dim-cresc 10 0.5 0.1) :type :symbol)
;; => (mf mp p pp ppp pppp ppp pp p mp)

;; Reverse the dynamic list
(velocity-retrograde '(mf p pp mp = = = p fff)) ; => (fff p mp mp mp mp pp p mf)

;; Gen-dynamic generateS a dynamic (crescendo and diminuendo) 
;; over a given number of steps (count).

(gen-dynamic '(3 3) '(p f))
;; => (p< < < f f f)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f))
;; => (pp< < < f< < < < < ff> > > > mf< < < < f f f f f)

;; Examples with optional end velocity value:

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) 'p)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f> > > > p)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) '>)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f> > > > >)

(gen-dynamic '(3 5 4 4 5) '(pp f ff mf f) '<)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f< < < < <)

(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)))
;; => ((pp< < < f> > > > >) (p< < < < mf< < < <) (f> > > > > p p p))

(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)) 'f)
;; => ((pp< < < f> > > > >) (p< < < < mf< < < <) (f> > > > > p< < f))

(gen-dynamic '((3 5) (4 4) (5 3)) '((pp f) (p mf) (f p)) '<)
;; => (pp< < < f< < < < < ff> > > > mf< < < < f< < < < <)

;; OMN EXAMPLE

;; Make pitches according to dynamics
(defparameter vel (rnd 24 :low 0.1 :high 1.0))
(setf vel1 (get-velocity vel :type :symbol))
(setf pitches1 (midi-to-pitch 
                (loop for i in vel collect 
                  (+ 28 (floor (* i 80))))))
;; floor truncates the decimal places, necessary for midi-notes (= integer)

(setf durs1 (loop for i in vel
              if (< i 0.5)
              collect 1/2
              else
              collect 1/16))

(make-omn
 :pitch pitches1
 :length durs1
 :velocity vel1)
  











