;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; 2023/2025 (c) Achim Bornhoeft
;;; ---------------------------------------------------------

;;; COMMON LISP

#|
Common Lisp is a programming language that is built around lists.
In Lisp, programs and data are both written as lists.
For example: (+ 1 2 3) means “add 1, 2, and 3.”
Because code looks like data, you can easily change and create 
new code while the program runs. This makes Lisp very flexible 
and powerful. It’s often used for artificial intelligence, 
symbolic computation, and rapid prototyping, but it can also be 
used for general software development.

(See 'Common Lisp' documentation in Navigator.)
|#

;;; COMMENTS

#|
1 to 3 semicolons are starting a comment. 
Multiline comments are starting with #| and ending with |#
There is a special Opusmodus way of multiline comments
where the code highlighting is preserved starting with #!
and ending with !#
Comments are not evaluated!
|#

#!
;;; (RED) MAIN COMMENTs, HEADERS, CREDITS, etc.
;; (ORANGE) Descriptive comments in the code
; (BROWN) Inline comments
!#

;;; PARANTHESES

#|
Every correct LISP expression has the same amount of 
opening and closing parantheses.

Place the cursor after any of the parantheses to 
evaluate the containing expression.
To evaluate an expression press 'cmd + e' and 
see the result in Listener below.

(Press 'cmd-shift e' to evaluate the whole composer window 
and show the output of the last expression.)
|#

;; the first statement is generally a function in LISP
;; followed by 0 to N arguments

;; random function without arguments
(rndn) ; default result: one floating point number between 0 and 1

;; + function with two arguments
(+ 1 2) ; result: 1 + 2 = 3

;; random function with one argument (= highest random number - 1)
(random 10) ; random number between 0 and 9

;; OPUSMODUS has (+/- 800) inbuilt functions , 
;; many of them directly related to music
(ambitus-instrument 'flute) 
;; => (0 41) result in integers where 0 is c4

;; all pitches of a flute
;; expressions are evaluated from inside to outside
(integer-to-pitch
 (gen-integer 
  (second 
   (ambitus-instrument 'flute))))
;; 1. ambitus of the flute: (0 41) 
;; 2. second argument = highest note of the flute: 41
;; 3. (gen-integer 41): make integers from 0 to 41
;; 4. convert all integers to pitches

;;; VARIABLES

;; If any material is used multiple times, it is helpful 
;; to assign it to a variable with any name, which can 
;; then be used to call it up.

(setf pitches (midi-to-pitch '(71 70 74 63 67 66)))
;; now pitches hold the values from midi-to-pitch

;; here the values stored in the variable "pitches" 
;; are converted back to midi notes
(pitch-to-midi pitches)

;;; LISTS

;; numbers from 0 to 7 in a list (= container)
(list 0 1 2 3 4 5 6 7) ; list function
;; same as
'(0 1 2 3 4 5 6 7) 
;; latter is a so called quoted list, means "as it is" 
;; otherwise 0 would be the function

;;; ALL musical parameters in Opusmodus are stored in lists.

;; lists can be infinitely nested

(- (+ 1 2) 3) ; 1 + 2 - 3 = 0

;;; ALL levels of a score (measure, voice, part, system, etc.)
;;; are displayed as lists within lists.

;; define variables for 2 lists with different content:
(setf lst1 '(1 2 3 4 5))
(setf lst2 '(a b c d e))

;; collect lists into one list
(list lst1 lst2) ; ((1 2 3 4 5) (a b c d e))

;; merge lists into one list
(append lst1 lst2) ; (1 2 3 4 5 a b c d e)

;; Common Lisp also defines functions to retrieve values from a list:

(first lst1) ; 1
(second lst1) ; 2
;; an so on until
(tenth lst1) ; nil

(rest lst1) ; (2 3 4 5)
(butlast lst1) ; (1 2 3 4)
(last lst1) ; (5)

;; With the function nth specific singular items
;; on a specific position in a list are retrieved.
;; Note that the first item in a list is the 0th element. 

(nth 3 lst1) ; 4
(nth 0 lst2) ; a

;;; DOCUMENTATION

#|
Place the cursor anywhere in a function name and 
press 'ctrl y' for the direct display of the arguments
and a short description of the function. 
(Press esc to close this display)

Press 'cmd d' for extensive documentation, examples
and occurrences in other documents. 
Works in Assistant as well!
|#

(rndn)

(midi-to-pitch '(71 70 74 63 67 66))

;;; AUTOCOMPLETE

#|
Type an opening parenthesis and the first letter of a symbol,
then press Tab to invoke the completion menu. Use the arrow 
keys to navigate; Return inserts the selection.
|#