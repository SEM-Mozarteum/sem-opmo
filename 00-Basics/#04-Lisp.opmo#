;;; ---------------------------------------------------------
;;; Opusmodus Tutorial
;;; Studio for Electronic Music (SEM)
;;; University Mozarteum, Salzburg
;;; 2023/2025 (c) Achim Bornhoeft
;;; ---------------------------------------------------------

;;; COMMON LISP

#|
Opusmodus is built on Common Lisp (LispWorks.
Common Lisp is a general-purpose, multi-paradigm
programming language. 
It supports a combination of procedural, functional,   
and object-oriented programming paradigms. 
As a dynamic programming language, it facilitates 
evolutionary and incremental software development, 
with iterative compilation into efficient run-time 
programs. 
Common Lisp is a dialect of Lisp. It uses S-expressions 
to denote both code and data structure. Function calls, 
macro forms and special forms are written as lists, 
with the name of the operator first.

https://en.wikipedia.org/wiki/Common_Lisp

(See 'Common Lisp' documentation in Navigator.)
|#

;;; COMMENTS

#|
1 to 3 semicolons are starting a comment. 
Multiline comments are starting with #| and ending with |#
There is a special Opusmodus way of multiline comments
where the code highlighting is preserved starting with #!
and ending with !#
Comments are not evaluated!
|#

#!
;;; (RED) MAIN COMMENTs, HEADERS, CREDITS, etc.
;; (ORANGE) Comments in the code
; (BROWN) Comments in line
!#

;;; PARANTHESES

#|
Every correct LISP expression has the same amount of 
opening and closing parantheses.

Place the cursor after any of the parantheses to 
evaluate the containing expression.
To evaluate an expression press 'cmd + e' and 
see the result in Listener below.

Press 'cmd-shift e' to evaluate the whole composer window 
and show the output of the last expression.
|#

;; the first statement is generally a function in LISP
(+ 1 2) ; + = function: 1 + 2 = 3

(random 10) ; random function: a number between 0 and 9

;; numbers from 0 to 7 in a list (= container)
(list 0 1 2 3 4 5 6 7) ; list function
;; same as
'(0 1 2 3 4 5 6 7) 
;; so called quoted list, means "as it is" 
;; otherwise 0 would be the function

;; lists can be infinitely nested
;; they are evaluated from inside to outside
(- (+ 1 2) 3) ; 1 + 2 - 3 = 0

;; OPUSMODUS has (+/- 800) inbuilt functions , 
;; many of them directly related to music
(ambitus-instrument 'flute) 
;; => (0 41) result in integers where 0 is c4

;; nested function is evaluated from inside to outside
(integer-to-pitch
 (gen-integer 
  (second 
   (ambitus-instrument 'flute))))
;; 1. ambitus of the flute: (0 41) 
;; 2. second argument = highest note of the flute: 41
;; 3. (gen-integer 41): make integers from 0 to 41
;; 4. convert all integers to pitches

;;; DOCUMENTATION

#|
Place the cursor anywhere in a function name and 
press 'ctrl y' for the direct display of the arguments
and a short description of the function. (Press esc to
close this display)

Press 'cmd d' for extensive documentation, examples
and occurrences in other documents. 
Works in Assistant as well!
|#

(rndn)

(midi-to-pitch '(71 70 74 63 67 66))

;;; VARIABLES

;; If a material is used multiple times, it is helpful 
;; to assign it to a variable with any name, which can 
;;  then be used to call it up.

(setf pitches (midi-to-pitch '(71 70 74 63 67 66)))
;; now pitches hold the values from midi-to-pitch

;; here the pitches are converted back to midi notes
(pitch-to-midi pitches)

;;; -------------------------------------------------------  

